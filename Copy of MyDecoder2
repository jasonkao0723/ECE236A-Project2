{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of MyDecoder2","provenance":[{"file_id":"https://github.com/jasonkao0723/ECE236A-Project2/blob/main/MyDecoder2.ipynb","timestamp":1608234905461}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"eilX591Xv-uk","colab":{"base_uri":"https://localhost:8080/","height":851},"executionInfo":{"status":"ok","timestamp":1608243034448,"user_tz":480,"elapsed":10209,"user":{"displayName":"HONGYI CHEN","photoUrl":"","userId":"10492674023217313779"}},"outputId":"ac9e2062-55f4-4502-9956-886e2e0d0a2e"},"source":["#!/usr/bin/env python3\r\n","# -*- coding: utf-8 -*-\r\n","\"\"\"\r\n","Created on Tue Dec  8 19:52:18 2020\r\n","@author: hjl\r\n","\"\"\"\r\n","\r\n","import numpy as np\r\n","import cvxpy as cp\r\n","import math\r\n","from random import shuffle\r\n","    \r\n","\r\n","def generator(n, prob_inf, T):\r\n","    \r\n","    \r\n","    ppl = np.random.binomial(size=n, n=1, p= prob_inf)    # ppl is the population\r\n","    \r\n","    \r\n","    col_weight = math.ceil(math.log(2)*T/(n*prob_inf))\r\n","    X = np.zeros((T,n))\r\n","    X[0:col_weight,:] = 1\r\n","    idx = np.random.rand(*X.shape).argsort(0)\r\n","    X = X[idx, np.arange(X.shape[1])]\r\n","    y_temp = X@ppl #result vector\r\n","    y = np.ones_like(y_temp)*(y_temp>=1) #test results\r\n","    \r\n","    return X,ppl, y #return population and test results\r\n","\r\n","def generator_nonoverlapping(n, q, p, m, T):\r\n","    \r\n","    ppl = np.zeros(n)    # ppl is the population\r\n","    A = np.zeros((m,n)) #family structure matrix\r\n","    A[0:1,:] = 1\r\n","    idx = np.random.rand(*A.shape).argsort(0)\r\n","    A = A[idx, np.arange(A.shape[1])]\r\n","    \r\n","    inf_families = np.random.binomial(size=m, n=1, p= q)\r\n","    \r\n","    for i in range(m):\r\n","        if inf_families[i] == 1:     #check if family is infected\r\n","            indices = A[i,:] == 1    #find the family members\r\n","            binom = np.random.binomial(size=np.sum(indices),n=1, p=p)\r\n","            ppl[indices] = (ppl[indices] + binom)>0\r\n","    \r\n","    \r\n","    col_weight = math.ceil(math.log(2)*T/(n*q*p)) \r\n","    X = np.zeros((T,n))\r\n","    X[0:col_weight,:] = 1\r\n","    idx = np.random.rand(*X.shape).argsort(0)\r\n","    X = X[idx, np.arange(X.shape[1])]\r\n","    y_temp = X@ppl\r\n","    y = np.ones_like(y_temp)*(y_temp>=1) #test results\r\n","    \r\n","    return X, ppl, y, A   #return family structured population, family assignment vector, test results\r\n","    \r\n","def add_noise_zchannel(y, p_noisy):\r\n","    \r\n","    y_noisy = np.zeros_like(y)\r\n","    indices = y==1\r\n","    noise_mask = np.random.binomial(size=np.sum(indices),n=1, p=1-p_noisy)\r\n","    y_noisy[indices] = y[indices]*noise_mask\r\n","    \r\n","    return y_noisy\r\n","    \r\n","def add_noise_bsc(y, p_noisy):\r\n","    \r\n","    y_noisy = np.zeros_like(y)\r\n","    noise_mask = np.random.binomial(size=y.shape[0],n=1, p=p_noisy)\r\n","    y_noisy = (y+noise_mask)%2\r\n","    \r\n","    return y_noisy\r\n","    \r\n","\r\n","def lp(X, y):\r\n","    # params\r\n","    t, n = X.shape\r\n","    \r\n","    # cp\r\n","    z = cp.Variable(n, boolean=True)\r\n","    objective = cp.Minimize(cp.sum(z))\r\n","    constraints = [z >= 0, z <= 1]\r\n","    for t, y_t in enumerate(y):\r\n","        if y_t == 1:\r\n","            constraints.append(cp.sum(X[t,:]@z) >= 1)\r\n","        else:\r\n","            constraints.append(cp.sum(X[t,:]@z) == 0)\r\n","    \r\n","    prob = cp.Problem(objective, constraints)\r\n","    prob.solve()\r\n","\r\n","    return z.value\r\n","\r\n","# def lp_nonoverlapping(X,y,A):\r\n","\r\n","#     # params\r\n","#     t, n = X.shape\r\n","    \r\n","#     # cp\r\n","#     z = cp.Variable(n, boolean=True)\r\n","#     objective = cp.Minimize(cp.sum(A@z))\r\n","#     constraints = [z >= 0, z <= 1]\r\n","#     for t, y_t in enumerate(y):\r\n","#         if y_t == 1:\r\n","#             constraints.append(cp.sum(X[t,:]@z) >= 1)\r\n","#         else:\r\n","#             constraints.append(cp.sum(X[t,:]@z) == 0)\r\n","    \r\n","#     prob = cp.Problem(objective, constraints)\r\n","#     prob.solve()\r\n","\r\n","#     return z.value\r\n","def lp_nonoverlapping(X,y,A):\r\n","\r\n","    # params\r\n","    t, n = X.shape\r\n","    f = cp.Variable(A.shape[0])\r\n","    # cp\r\n","    z = cp.Variable(n)\r\n","    objective = cp.Minimize(cp.sum(z)+cp.sum(f))\r\n","    constraints = [z >= 0, z <= 1,f >= 0, f <= 1]\r\n","    for t, y_t in enumerate(y):\r\n","        if y_t == 1:\r\n","            constraints.append(cp.sum(X[t,:]@z) >= 1)\r\n","        else:\r\n","            constraints.append(cp.sum(X[t,:]@z) == 0)\r\n","    constraints.append(((A.T)@f)>=z)\r\n","    ppl_pred = cp.Problem(objective, constraints)\r\n","    ppl_pred.solve()\r\n","\r\n","    return z.value\r\n","    \r\n","def lp_noisy_z(X, y):\r\n","    # params\r\n","    t, n = X.shape\r\n","    zeta = 0.5\r\n","    # cp\r\n","    z = cp.Variable(n, boolean=True)\r\n","    xi = cp.Variable(t)\r\n","    objective = cp.Minimize(cp.sum(z) + zeta*cp.sum(xi))\r\n","    constraints = [z >= 0, z <= 1, xi >= 0, xi <= 1]\r\n","    for t, y_t in enumerate(y):\r\n","        if y_t == 1:\r\n","            constraints.append(cp.sum(X[t,:]@z) + xi[t] >= 1)\r\n","        else:\r\n","            constraints.append(cp.sum(X[t,:]@z) - xi[t] >= 0)\r\n","    \r\n","    \r\n","    prob = cp.Problem(objective, constraints)\r\n","    prob.solve()\r\n","\r\n","    return z.value\r\n","\r\n","def lp_noisy_bsc(X, y):\r\n","     # params\r\n","    t, n = X.shape\r\n","    zeta = 0.5\r\n","    # cp\r\n","    z = cp.Variable(n, boolean=True)\r\n","    xi = cp.Variable(t)\r\n","    objective = cp.Minimize(cp.sum(z) + zeta*cp.sum(xi))\r\n","    constraints = [z >= 0, z <= 1, xi >= 0]\r\n","    for t, y_t in enumerate(y):\r\n","        if y_t == 1:\r\n","            constraints.append(cp.sum(X[t,:]@z) + xi[t] >= 1)\r\n","            constraints.append(xi[t] <= 1)\r\n","        else:\r\n","            constraints.append(cp.sum(X[t,:]@z) - xi[t] == 0)\r\n","    \r\n","    \r\n","    prob = cp.Problem(objective, constraints)\r\n","    prob.solve()\r\n","\r\n","    return z.value\r\n","\r\n","def lp_noisy_z_nonoverlapping(X, y, A):\r\n","    zeta = 0.5\r\n","    \r\n","    z = cp.Variable(X.shape[1], boolean=True)\r\n","    \r\n","    X_1 = X[y>0]\r\n","    sigma_1 = cp.Variable(X_1.shape[0])\r\n","\r\n","    X_0 = X[y<1]\r\n","    sigma_0 = cp.Variable(X_0.shape[0])\r\n","    \r\n","    constraints = [((X_1 @ z) + sigma_1) >= 1, ((X_0 @ z) - sigma_0) >= 0, z >= 0, z <= 1, sigma_0 == 0, sigma_1 >= 0, sigma_1 <= 1]\r\n","    ppl_pred = cp.Problem(cp.Minimize(cp.sum(A @ z) + cp.multiply(zeta, cp.sum(sigma_0) + cp.sum(sigma_1))), constraints)\r\n","    # ppl_pred.solve(solver='ECOS_BB')\r\n","    ppl_pred.solve()\r\n","    \r\n","    print(ppl_pred.status)\r\n","    \r\n","    print(z.value)\r\n","\r\n","    return z.value\r\n","    \r\n","def lp_noisy_bsc_nonoverlapping(X,y,A):\r\n","    zeta = 0.5\r\n","    \r\n","    z = cp.Variable(X.shape[1], boolean=True)\r\n","    \r\n","    X_1 = X[y>0]\r\n","    sigma_1 = cp.Variable(X_1.shape[0])\r\n","\r\n","    X_0 = X[y<1]\r\n","    sigma_0 = cp.Variable(X_0.shape[0])\r\n","    \r\n","    constraints = [((X_1 @ z) + sigma_1) >= 1, ((X_0 @ z) - sigma_0) >= 0, z >= 0, sigma_0 >= 0, sigma_0 <= 1, sigma_1 >= 0, sigma_1 <= 1]\r\n","    ppl_pred = cp.Problem(cp.Minimize(cp.sum(A @ z) + cp.multiply(zeta, cp.sum(sigma_0) + cp.sum(sigma_1))), constraints)\r\n","    ppl_pred.solve()\r\n","\r\n","    return z.value\r\n","\r\n","\r\n","def get_stats(ppl, ppl_pred):\r\n","    FP = 0\r\n","    FN = 0\r\n","    for i, p in enumerate(ppl):\r\n","        # if ppl_pred[i] <= 0 or ppl_pred[i] < 0.5:\r\n","        #   ppl_pred[i]=0\r\n","        # if ppl_pred[i] >= 0.5:\r\n","        #   ppl_pred[i] = 1\r\n","        if ppl_pred[i] != 0 and ppl_pred[i] != 1:\r\n","            raise Exception(\"ppl_pred has invalid element\")\r\n","        if p == 0 and ppl_pred[i] == 1:\r\n","            FP += 1\r\n","        elif p == 1 and ppl_pred[i] == 0:\r\n","            FN += 1\r\n","    Hamming = FP + FN\r\n","    return FP, FN, Hamming\r\n","\r\n","def get_prob(ppl, ppl_pred, Type='FN'):\r\n","  T = len(ppl)\r\n","  count_and = 0\r\n","  prior = 0\r\n","\r\n","  if Type == 'FN':\r\n","    for t in range(T):\r\n","      if ppl[t] == 1 and ppl_pred[t] == 0:\r\n","        count_and += 1\r\n","    for t in range(T):\r\n","      if ppl[t] == 1:\r\n","        prior += 1\r\n","  elif Type == 'FP':\r\n","    for t in range(T):\r\n","      if ppl[t] == 0 and ppl_pred[t] == 1:\r\n","        count_and += 1\r\n","    for t in range(T):\r\n","      if ppl[t] == 0:\r\n","        prior += 1\r\n","\r\n","  count_and /= T\r\n","  prior /= T\r\n","\r\n","  return count_and/prior\r\n","\r\n","\r\n","def show_non_noisy_results(N, q, p, m):\r\n","    test_setSize = np.arange(100, 800, 100)\r\n","    predictAcc = np.zeros(test_setSize.shape[0])\r\n","    counter = 0\r\n","\r\n","    \r\n","    for i_test in test_setSize:\r\n","        [X, ppl, y] = generator(N, q, i_test)\r\n","        pred_s = lp(X, y)\r\n","        predictAcc[counter] = 1-sum(abs((ppl-pred_s.T).T))/1000\r\n","        counter += 1\r\n","\r\n","    print(get_stats(ppl, pred_s))\r\n","    \r\n","    predictAcc_nonoverlapping = np.zeros(test_setSize.shape[0])\r\n","    counter = 0\r\n","    \r\n","    for i_test in test_setSize:\r\n","        [X, ppl, y, A] = generator_nonoverlapping(N, q, p, m, i_test)\r\n","        pred_s = lp_nonoverlapping(X,y,A)\r\n","        predictAcc_nonoverlapping[counter] = 1-sum(abs((ppl-pred_s.T).T))/1000\r\n","        counter += 1\r\n","        \r\n","    print(get_stats(ppl, pred_s))\r\n","        \r\n","    plt.figure()\r\n","    plt.plot(test_setSize,predictAcc,'o-',test_setSize,predictAcc_nonoverlapping,'o-')\r\n","    plt.title(\"Classification Accuracy\")\r\n","    plt.xlabel(\"Number of Tests\")\r\n","    plt.ylabel(\"Average Accuracy\")\r\n","    plt.grid(True)\r\n","    \r\n","def show_noisy_z_results(N, q, p, m, p_noisy):\r\n","    test_setSize = np.arange(100, 800, 100)\r\n","    predictAcc = np.zeros(test_setSize.shape[0])\r\n","    counter = 0\r\n","\r\n","    \r\n","    for i_test in test_setSize:\r\n","        [X, ppl, y] = generator(N, q, i_test)\r\n","        y = add_noise_zchannel(y, p_noisy)\r\n","        pred_s = lp_noisy_z(X, y)\r\n","        predictAcc[counter] = 1-sum(abs((ppl-pred_s.T).T))/1000\r\n","        counter += 1\r\n","\r\n","    predictAcc_nonoverlapping = np.zeros(test_setSize.shape[0])\r\n","    counter = 0\r\n","    \r\n","    for i_test in test_setSize:\r\n","        [X, ppl, y, A] = generator_nonoverlapping(N, q, p, m, i_test)\r\n","        y = add_noise_zchannel(y, p_noisy)\r\n","        pred_s = lp_noisy_z_nonoverlapping(X, y, A)\r\n","        predictAcc_nonoverlapping[counter] = 1-sum(abs((ppl-pred_s.T).T))/1000\r\n","        counter += 1\r\n","        \r\n","    plt.figure()\r\n","    plt.plot(test_setSize,predictAcc,'o-',test_setSize,predictAcc_nonoverlapping,'o-')\r\n","    plt.title(\"Classification Accuracy\")\r\n","    plt.xlabel(\"Number of Tests\")\r\n","    plt.ylabel(\"Average Accuracy\")\r\n","    plt.grid(True)\r\n","\r\n","def run_tests(pop_size, prob_inf, test_size, prob_inf_fam=0, num_fam=0, p_noisy=0, noise=None, comm=False):\r\n","  ppl_pred = []\r\n","  ppl_list = []\r\n","\r\n","  for t in test_size:\r\n","    if comm:\r\n","      X, ppl, y, A = generator_nonoverlapping(pop_size, prob_inf_fam, prob_inf, num_fam, t)\r\n","      if noise == None:\r\n","        temp = lp_nonoverlapping(X, y, A)\r\n","      elif noise == 'z':\r\n","        y = add_noise_zchannel(y, p_noisy)\r\n","        temp = lp_noisy_z_nonoverlapping(X, y, A)\r\n","      elif noise == 'bsc':\r\n","        y = add_noise_bsc(y, p_noisy)\r\n","        temp = lp_noisy_bsc_nonoverlapping(X, y, A)\r\n","    else:\r\n","      X, ppl, y = generator(pop_size, prob_inf, t)\r\n","      if noise == None:\r\n","        temp = lp(X, y)\r\n","      elif noise == 'z':\r\n","        y = add_noise_zchannel(y, p_noisy)\r\n","        temp = lp_noisy_z(X, y)\r\n","      elif noise == 'bsc':\r\n","        y = add_noise_bsc(y, p_noisy)\r\n","        temp = lp_noisy_z(X, y)\r\n","\r\n","    ppl_list.append(ppl)     \r\n","    ppl_pred.append(temp)\r\n","\r\n","  return ppl_pred, ppl_list\r\n","\r\n","def vis_error(test_size, ppl, ppl_pred):\r\n","  FN = []\r\n","  FP = []\r\n","  Hamming = []\r\n","\r\n","  for i,t in enumerate(test_size):\r\n","    P, N, H = get_stats(ppl[i], ppl_pred[i])\r\n","    FN.append(N)\r\n","    FP.append(P)\r\n","    # print(\"Number of Tests: \",t,\"False Positive:\",P,\"False Negative:\",N,\"Hamming:\",H)\r\n","    Hamming.append(H/1000)\r\n","\r\n","  plt.figure()\r\n","  # plt.plot(test_size, FN, '-o', test_size, FP, '-+')\r\n","  plt.plot(test_size, Hamming, '-*')\r\n","  plt.title('Hamming Error Plot')\r\n","  plt.xlabel('Number of Tests')\r\n","  plt.ylabel('Error')\r\n","  plt.show()\r\n","\r\n","def vis_prob(test_size, ppl, ppl_pred, Type='FN'):\r\n","  prob = []\r\n","  for i in range(len(test_size)):\r\n","      prob.append(get_prob(ppl[i], ppl_pred[i], Type=Type))\r\n","    \r\n","  plt.figure()\r\n","  plt.plot(test_size, prob, '-0')\r\n","  plt.title('Probability of '+Type+' vs Test Size')\r\n","  plt.xlabel('Test Size')\r\n","  plt.ylabel('Probability of '+Type)\r\n","  plt.show()  \r\n","\r\n","if __name__ == '__main__':\r\n","    import matplotlib.pyplot as plt\r\n","    \r\n","    #Change these values according to your needs, you can also define new variables.\r\n","    n = 1000                        # size of population\r\n","    m = 50                          #number of families\r\n","    p = 0.8                         #probability of infection\r\n","    q = 0.1                         #probability of a family to be chosen as infected\r\n","    T = 200                         #number of tests \r\n","    p_noisy = 0.1                   #test noise\r\n","    \r\n","\r\n","    test_size = np.arange(100,1000,100)\r\n","    \r\n","    # Base LP\r\n","    ppl_pred, ppl = run_tests(pop_size=n, prob_inf=p, test_size=test_size)\r\n","    vis_error(test_size, ppl, ppl_pred)\r\n","    vis_prob(test_size, ppl, ppl_pred, Type='FN')\r\n","    vis_prob(test_size, ppl, ppl_pred, Type='FP')\r\n","    \r\n","    # Z Channel LP\r\n","    # ppl_pred, ppl = run_tests(pop_size=n, prob_inf_fam=q,prob_inf=p, num_fam=200,test_size=test_size, p_noisy=p_noisy, noise=None,comm=True)\r\n","    # vis_error(test_size, ppl, ppl_pred)\r\n","    # vis_prob(test_size, ppl, ppl_pred, Type='FN')\r\n","    # vis_prob(test_size, ppl, ppl_pred, Type='FP')\r\n"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HBeqyzAqaK8K","executionInfo":{"status":"ok","timestamp":1608243061798,"user_tz":480,"elapsed":549,"user":{"displayName":"HONGYI CHEN","photoUrl":"","userId":"10492674023217313779"}},"outputId":"780a401d-c65d-409f-b93f-7e791969c219"},"source":["len(ppl_pred)\r\n","\r\n"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h5JQpkMRIGnn","outputId":"2ac0a002-9405-41fb-d735-abe16248e084"},"source":["x = np.array([1,2,3,4])\r\n","z = np.array([1,1,1,1])\r\n","y = cp.sum(x@z, axis=0, keepdims=False)\r\n","print(y)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Sum(10.0, 0, False)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_vGFomI5PNwf"},"source":[""],"execution_count":null,"outputs":[]}]}